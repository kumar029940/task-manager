{
  "version": 3,
  "sources": ["empty-module:@remix-run/node", "empty-module:../utils/db.server", "../../../app/routes/_index.jsx"],
  "sourcesContent": ["module.exports = {};", "module.exports = {};", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\_index.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\_index.jsx\");\n  import.meta.hot.lastModified = \"1751824245382.6162\";\n}\n// REMIX HMR END\n\nimport { json } from \"@remix-run/node\";\nimport { useLoaderData, Form } from \"@remix-run/react\";\nimport { connectToDB } from \"../utils/db.server\";\nimport { Task } from \"../models/task\";\n\n// LOAD existing tasks\nexport async function loader() {\n  await connectToDB();\n  const tasks = await Task.find().lean();\n  return json({\n    tasks\n  });\n}\n\n// ADD a new task\nexport async function action({\n  request\n}) {\n  const url = new URL(request.url);\n  const toggleId = url.searchParams.get(\"toggle\");\n  await connectToDB();\n  if (toggleId) {\n    const task = await Task.findById(toggleId);\n    if (task) {\n      task.completed = !task.completed;\n      await task.save();\n    }\n    return json({\n      success: true\n    });\n  }\n  const formData = await request.formData();\n  const title = formData.get(\"title\");\n  if (!title || typeof title !== \"string\") {\n    return json({\n      error: \"Title is required\"\n    }, {\n      status: 400\n    });\n  }\n  await Task.create({\n    title\n  });\n  return json({\n    success: true\n  });\n}\nexport default function Index() {\n  _s();\n  const {\n    tasks\n  } = useLoaderData();\n  return <div className=\"max-w-xl mx-auto mt-10\">\n      <h1 className=\"text-3xl font-bold mb-4 text-center\">Task Manager</h1>\n\n      {/* Add Task Form */}\n      <Form method=\"post\" className=\"flex gap-2 mb-6\">\n        <input type=\"text\" name=\"title\" placeholder=\"Enter a task\" required className=\"border border-gray-300 p-2 flex-1 rounded\" />\n        <button type=\"submit\" className=\"bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700\">\n          Add\n        </button>\n      </Form>\n\n      {/* Task List */}\n      <ul className=\"space-y-2\">\n        {tasks.map(task => <li key={task._id} className=\"p-3 border rounded bg-white flex justify-between items-center\">\n            <Form method=\"post\" action={`?toggle=${task._id}`}>\n              <button type=\"submit\" className=\"text-left text-black\">\n                {task.title}\n              </button>\n            </Form>\n            <span className=\"text-sm text-gray-500\">\n              {task.completed ? \"\u2705 Done\" : \"\u23F3 Pending\"}\n            </span>\n          </li>)}\n      </ul>\n    </div>;\n}\n_s(Index, \"JwSV+PV394aTvUddxZmmlRZ6904=\", false, function () {\n  return [useLoaderData];\n});\n_c = Index;\nvar _c;\n$RefreshReg$(_c, \"Index\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,WAAO,UAAU,CAAC;AAAA;AAAA;;;ACAlB;AAAA;AAAA,WAAO,UAAU,CAAC;AAAA;AAAA;;;ACqBlB,kBAAqB;AAErB,gBAA4B;AAmDtB;AAzEN,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,kCAAoC,EAAE;AAAA,EAC/E;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAyB;AACzB,cAAY,IAAI,eAAe;AACjC;AAkDe,SAAR,QAAyB;AAC9B,KAAG;AACH,QAAM;AAAA,IACJ;AAAA,EACF,IAAI,cAAc;AAClB,SAAO,mDAAC,SAAI,WAAU,0BAClB;AAAA,uDAAC,QAAG,WAAU,uCAAsC,4BAApD;AAAA;AAAA;AAAA;AAAA,WAAgE;AAAA,IAGhE,mDAAC,QAAK,QAAO,QAAO,WAAU,mBAC5B;AAAA,yDAAC,WAAM,MAAK,QAAO,MAAK,SAAQ,aAAY,gBAAe,UAAQ,MAAC,WAAU,+CAA9E;AAAA;AAAA;AAAA;AAAA,aAA0H;AAAA,MAC1H,mDAAC,YAAO,MAAK,UAAS,WAAU,8DAA6D,mBAA7F;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SAJF;AAAA;AAAA;AAAA;AAAA,WAKA;AAAA,IAGA,mDAAC,QAAG,WAAU,aACX,gBAAM,IAAI,UAAQ,mDAAC,QAAkB,WAAU,iEAC5C;AAAA,yDAAC,QAAK,QAAO,QAAO,QAAQ,WAAW,KAAK,OAC1C,6DAAC,YAAO,MAAK,UAAS,WAAU,wBAC7B,eAAK,SADR;AAAA;AAAA;AAAA;AAAA,aAEA,KAHF;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,MACA,mDAAC,UAAK,WAAU,yBACb,eAAK,YAAY,gBAAW,oBAD/B;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SARwB,KAAK,KAAd;AAAA;AAAA;AAAA;AAAA,WASjB,CAAK,KAVT;AAAA;AAAA;AAAA;AAAA,WAWA;AAAA,OAvBG;AAAA;AAAA;AAAA;AAAA,SAwBL;AACJ;AACA,GAAG,OAAO,gCAAgC,OAAO,WAAY;AAC3D,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,OAAO;AAExB,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
